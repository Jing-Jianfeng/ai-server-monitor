<template>
  <div class="server-overview">
    <!-- Server Basic Info -->
    <el-card class="info-card">
      <template #header>
        <span>Server Information</span>
      </template>
      <div v-if="serverInfo">
        <el-descriptions :column="2" border>
          <el-descriptions-item label="Operating System">
            {{ serverInfo.os.name }} {{ serverInfo.os.version }}
          </el-descriptions-item>
          <el-descriptions-item label="Kernel Version">
            {{ serverInfo.os.kernel }}
          </el-descriptions-item>
          <el-descriptions-item label="CPU">
            {{ serverInfo.cpu.model }}
          </el-descriptions-item>
          <el-descriptions-item label="Cores/Threads">
            {{ serverInfo.cpu.cores }}/{{ serverInfo.cpu.threads }}
          </el-descriptions-item>
          <el-descriptions-item label="Total Memory">
            {{ serverInfo.memory.total }} GB
          </el-descriptions-item>
          <el-descriptions-item label="GPUs">
            <div v-for="gpu in serverInfo.gpus" :key="gpu.model">
              {{ gpu.model }} ({{ gpu.vram }} GB)
            </div>
          </el-descriptions-item>
        </el-descriptions>
        
        <h3>Disk Storage</h3>
        <el-table :data="serverInfo.disks" style="width: 100%">
          <el-table-column prop="mount" label="Mount Point" width="180" />
          <el-table-column prop="total" label="Total (GB)" width="120" />
          <el-table-column prop="available" label="Available (GB)" width="120" />
          <el-table-column label="Usage">
            <template #default="scope">
              <el-progress 
                :percentage="((scope.row.total - scope.row.available) / scope.row.total * 100)" 
                :color="getProgressColor((scope.row.total - scope.row.available) / scope.row.total * 100)"
              />
            </template>
          </el-table-column>
        </el-table>
      </div>
    </el-card>

    <!-- CPU Monitoring -->
    <el-row :gutter="20">
      <el-col :span="12">
        <el-card class="monitor-card">
          <template #header>
            <span>CPU Usage</span>
          </template>
          <div ref="cpuChart" class="chart-container"></div>
          <el-table :data="cpuProcesses" style="width: 100%; margin-top: 20px;">
            <el-table-column prop="name" label="Process" width="120" />
            <el-table-column prop="memory" label="Memory (MB)" width="120" />
            <el-table-column prop="pid" label="PID" width="80" />
            <el-table-column prop="path" label="Path" />
          </el-table>
        </el-card>
      </el-col>
      
      <!-- GPU Monitoring -->
      <el-col :span="12">
        <el-card class="monitor-card">
          <template #header>
            <span>GPU Usage</span>
          </template>
          <div ref="gpuChart" class="chart-container"></div>
          <el-table :data="gpuProcesses" style="width: 100%; margin-top: 20px;">
            <el-table-column prop="name" label="Process" width="120" />
            <el-table-column prop="memory" label="VRAM (MB)" width="120" />
            <el-table-column prop="pid" label="PID" width="80" />
            <el-table-column prop="path" label="Path" />
          </el-table>
        </el-card>
      </el-col>
    </el-row>

    <!-- Disk I/O Monitoring -->
    <el-card class="monitor-card">
      <template #header>
        <span>Disk I/O</span>
      </template>
      <el-table :data="diskIO" style="width: 100%">
        <el-table-column prop="mount" label="Mount Point" width="180" />
        <el-table-column prop="readSpeed" label="Read Speed (MB/s)" width="150" />
        <el-table-column prop="writeSpeed" label="Write Speed (MB/s)" width="150" />
        <el-table-column label="Activity">
          <template #default="scope">
            <el-tag v-if="scope.row.readSpeed > 0 || scope.row.writeSpeed > 0" type="success">
              Active
            </el-tag>
            <el-tag v-else type="info">Idle</el-tag>
          </template>
        </el-table-column>
      </el-table>
    </el-card>
  </div>
</template>

<script>
import * as echarts from 'echarts'
import axios from 'axios'

export default {
  name: 'ServerOverview',
  data() {
    return {
      serverInfo: null,
      cpuProcesses: [],
      gpuProcesses: [],
      diskIO: [],
      cpuChart: null,
      gpuChart: null,
      cpuData: [],
      gpuData: [],
      timeLabels: [],
      updateInterval: null
    }
  },
  mounted() {
    this.loadServerInfo()
    this.initCharts()
    this.startMonitoring()
  },
  beforeUnmount() {
    if (this.updateInterval) {
      clearInterval(this.updateInterval)
    }
  },
  methods: {
    async loadServerInfo() {
      try {
        const response = await axios.get('http://localhost:3000/api/server/info')
        this.serverInfo = response.data
      } catch (error) {
        this.$message.error('Failed to load server information')
      }
    },
    
    initCharts() {
      this.cpuChart = echarts.init(this.$refs.cpuChart)
      this.gpuChart = echarts.init(this.$refs.gpuChart)
      
      const cpuOption = {
        title: { text: 'CPU Usage %' },
        tooltip: { trigger: 'axis' },
        xAxis: { type: 'category', data: this.timeLabels },
        yAxis: { type: 'value', max: 100 },
        series: [{
          name: 'CPU',
          type: 'line',
          data: this.cpuData,
          smooth: true,
          lineStyle: { color: '#409EFF' },
          areaStyle: { color: 'rgba(64, 158, 255, 0.3)' }
        }]
      }
      
      this.cpuChart.setOption(cpuOption)
      
      const gpuOption = {
        title: { text: 'GPU Usage %' },
        tooltip: { trigger: 'axis' },
        xAxis: { type: 'category', data: this.timeLabels },
        yAxis: { type: 'value', max: 100 },
        series: []
      }
      
      this.gpuChart.setOption(gpuOption)
    },
    
    startMonitoring() {
      this.updateInterval = setInterval(() => {
        this.updateCPUData()
        this.updateGPUData()
        this.updateDiskIO()
      }, 3000)
    },
    
    async updateCPUData() {
      try {
        const response = await axios.get('http://localhost:3000/api/server/cpu')
        const data = response.data
        
        this.cpuProcesses = data.processes
        
        // Update chart data
        const now = new Date().toLocaleTimeString()
        this.timeLabels.push(now)
        this.cpuData.push(data.usage)
        
        // Keep only last 20 data points
        if (this.timeLabels.length > 20) {
          this.timeLabels.shift()
          this.cpuData.shift()
        }
        
        this.cpuChart.setOption({
          xAxis: { data: this.timeLabels },
          series: [{ data: this.cpuData }]
        })
      } catch (error) {
        console.error('Failed to update CPU data:', error)
      }
    },
    
    async updateGPUData() {
      try {
        const response = await axios.get('http://localhost:3000/api/server/gpu')
        const data = response.data
        
        this.gpuProcesses = data.processes
        
        // Update GPU chart with multiple GPUs
        const series = data.gpus.map((gpu, index) => ({
          name: `GPU ${index}`,
          type: 'line',
          data: this.gpuData[index] || [],
          smooth: true
        }))
        
        // Update GPU data arrays
        data.gpus.forEach((gpu, index) => {
          if (!this.gpuData[index]) {
            this.gpuData[index] = []
          }
          this.gpuData[index].push(gpu.utilization)
          
          if (this.gpuData[index].length > 20) {
            this.gpuData[index].shift()
          }
        })
        
        this.gpuChart.setOption({
          xAxis: { data: this.timeLabels },
          series: series
        })
      } catch (error) {
        console.error('Failed to update GPU data:', error)
      }
    },
    
    async updateDiskIO() {
      try {
        const response = await axios.get('http://localhost:3000/api/server/disk')
        this.diskIO = response.data
      } catch (error) {
        console.error('Failed to update disk I/O data:', error)
      }
    },
    
    getProgressColor(percentage) {
      if (percentage < 50) return '#67C23A'
      if (percentage < 80) return '#E6A23C'
      return '#F56C6C'
    }
  }
}
</script>

<style scoped>
.server-overview {
  padding: 20px;
}

.info-card {
  margin-bottom: 20px;
}

.monitor-card {
  margin-bottom: 20px;
}

.chart-container {
  height: 300px;
  width: 100%;
}

.el-descriptions {
  margin-bottom: 20px;
}
</style>
